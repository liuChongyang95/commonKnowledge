单例模式

确保某一个类只有一个实例，并且自行实例化并向整个系统提供这个实例。

优点：
对于那些比较耗内存的类，只实例化一次可以大大提高性能，尤其是在移动开发中。
保持程序运行的时候，始终只有一个实例存在内存中。

public class Singleton{
//单例使用volatile修饰
    private static volatile Singleton instance = null;
//必须防止外部可以调用构造函数进行实例化，构造函数私有化
    private Singleton(){}

//必须定义一个静态函数获得该单例
   public static Singleton getInstance(){
if(instance==null){
synchronized(Singleton.class){
if(instance==null){
instance=new Singleton();
}
}
}
return instance;
}
}